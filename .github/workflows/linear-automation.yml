name: Linear Project Automation

on:
  push:
    branches: [ main, clean-setup ]
  pull_request:
    branches: [ main, clean-setup ]
  schedule:
    # Run every hour during working hours (9 AM - 5 PM UTC)
    - cron: '0 9-17 * * 1-5'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all Linear issues'
        required: false
        default: 'false'

env:
  PYTHON_VERSION: '3.11'

jobs:
  linear-sync:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Setup environment
      run: |
        mkdir -p ~/.apexsigma/memory
        mkdir -p ~/.apexsigma/config
        
    - name: Create temporary .env file
      run: |
        mkdir -p config/secrets
        if [ -n "${{ secrets.LINEAR_API_KEY }}" ]; then
          echo "LINEAR_API_KEY=${{ secrets.LINEAR_API_KEY }}" > config/secrets/.env
        else
          echo "LINEAR_API_KEY=" > config/secrets/.env
          echo "Warning: LINEAR_API_KEY secret not configured"
        fi
        if [ -n "${{ secrets.OPENROUTER_API_KEY }}" ]; then
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> config/secrets/.env
        else
          echo "OPENROUTER_API_KEY=" >> config/secrets/.env
          echo "Warning: OPENROUTER_API_KEY secret not configured"
        fi
        
    - name: Run Linear automation
      run: |
        python code/linear_automation.py
      env:
        LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        
    - name: Create progress summary
      run: |
        echo "## Linear Automation Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow**: Linear Project Automation" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: âœ… Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Linear project tracking has been updated with latest progress." >> $GITHUB_STEP_SUMMARY
        
    - name: Cleanup
      if: always()
      run: |
        rm -f config/secrets/.env

  development-milestone:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: linear-sync
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Create milestone issue
      run: |
        cat > milestone_script.py << 'EOF'
        import os
        import sys
        import asyncio
        sys.path.append('code')
        
        from linear_automation import linear_automation
        from memory_bridge import bridge
        
        async def create_milestone():
            await bridge.initialize_bridge()
            
            # Get recent commits
            import subprocess
            result = subprocess.run(['git', 'log', '--oneline', '-5'], 
                                  capture_output=True, text=True)
            commits = result.stdout.strip().split('\n')
            
            # Create milestone issue
            title = f"Development Milestone - {os.environ.get('GITHUB_SHA', 'Unknown')[:7]}"
            description = f"""# Development Milestone Achieved
        
        **Branch**: {os.environ.get('GITHUB_REF_NAME', 'unknown')}
        **Commit**: {os.environ.get('GITHUB_SHA', 'unknown')}
        **Workflow**: {os.environ.get('GITHUB_WORKFLOW', 'unknown')}
        
        ## Recent Changes
        
        """
            
            for commit in commits:
                if commit.strip():
                    description += f"- {commit}\n"
            
            description += f"""
        
        ## Automated Tracking
        
        This milestone was automatically created by the Linear automation workflow.
        
        ---
        *Generated by GitHub Actions Linear Automation*
        """
            
            result = await linear_automation.create_project_issue(title, description, priority=2)
            
            if result["success"]:
                print(f"SUCCESS: Milestone issue created - {result['issue']['url']}")
            else:
                print(f"ERROR: Failed to create milestone - {result.get('error', 'Unknown error')}")
        
        asyncio.run(create_milestone())
        EOF
        
        python milestone_script.py
      env:
        LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

  notify-status:
    runs-on: ubuntu-latest
    if: always()
    needs: [linear-sync, development-milestone]
    
    steps:
    - name: Notify completion
      run: |
        echo "Linear automation workflow completed"
        echo "- linear-sync: ${{ needs.linear-sync.result }}"
        echo "- development-milestone: ${{ needs.development-milestone.result }}"